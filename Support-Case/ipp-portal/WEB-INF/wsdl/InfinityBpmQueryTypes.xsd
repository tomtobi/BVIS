<?xml version="1.0" encoding="UTF-8"?>
<schema targetNamespace="http://infinity.com/bpm/ws/v2009a/api/query" elementFormDefault="qualified" xmlns:tns="http://infinity.com/bpm/ws/v2009a/api/query" xmlns:bat="http://infinity.com/bpm/ws/v2009a/api" xmlns="http://www.w3.org/2001/XMLSchema">
    <import namespace="http://infinity.com/bpm/ws/v2009a/api" schemaLocation="InfinityBpmService.xsd"/>
    <complexType name="Query">
        <annotation>
            <documentation> A query contains three optional elements: The 'predicate' element used for filtering contains an and-conjunction of predicates. The 'order' element used to specify a custom order. The 'policy' element used to specify policies e.g. a 'subsetPolicy' to limit results to a subset. </documentation>
        </annotation>
        <sequence>
            <element name="predicate" type="tns:AndTerm" minOccurs="0"/>
            <element name="order" type="tns:OrderCriteria" minOccurs="0"/>
            <element name="policy" type="tns:Policy" minOccurs="0"/>
        </sequence>
    </complexType>
    <complexType name="WorklistQuery">
        <annotation>
            <documentation> Additionally supports optional elements: A 'userContribution' which enables or disables the retrieval of the user's private worklist with an optional 'subsetPolicy'. A list of 'participantContributions' limiting the result to specified participants. One 'subsetPolicy' per 'participantContribution' can be set. </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:Query">
                <sequence>
                    <element name="userContribution" type="tns:UserContribution" minOccurs="0"/>
                    <element name="participantContributions" type="tns:ParticipantContributions" minOccurs="0"/>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="UserContribution">
        <annotation>
            <documentation> Configures the user's private worklist to be partially included in the result. </documentation>
        </annotation>
        <sequence>
            <element name="subsetPolicy" type="tns:SubsetPolicy" minOccurs="0"/>
        </sequence>
        <attribute name="included" type="boolean" default="true"/>
    </complexType>
    <complexType name="ParticipantContribution">
        <annotation>
            <documentation> Configures the worklist(s) resulting from the given participant filter to be included in the result. The size of these worklist contributions can optionally be restricted by the subsetPolicy </documentation>
        </annotation>
        <sequence>
            <element name="filter" type="tns:PerformingParticipantFilter" minOccurs="0"/>
            <element name="subsetPolicy" type="tns:SubsetPolicy" minOccurs="0"/>
        </sequence>
    </complexType>
    <complexType name="ParticipantContributions">
        <sequence>
            <element name="contribution" type="tns:ParticipantContribution" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
    </complexType>
    <complexType name="ActivityQuery">
        <annotation>
            <documentation> Query container for building complex queries for activity instances. </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:Query">
                <sequence> </sequence>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="ProcessQuery">
        <annotation>
            <documentation> Query container for building complex queries for process instances. </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:Query">
                <sequence> </sequence>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="ProcessDefinitionQuery">
        <annotation>
            <documentation> Query container for building complex queries for process definitions. </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:Query">
                <sequence> </sequence>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="UserQuery">
        <annotation>
            <documentation> Query for fetching workflow users matching specific criteria. Most common filter criteria will be the user's attributes. A more advanced use case is retrieving users having a specific role or organization membership by using 'participantAssociation' predicate. </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:Query">
                <sequence> </sequence>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="UserGroupQuery">
        <annotation>
            <documentation> Query for fetching workflow user groups matching specific criteria. Most common filter criteria will be the user group's attributes. </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:Query">
                <sequence> </sequence>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="LogEntryQuery">
        <annotation>
            <documentation> Query for fetching log entries matching specific criteria. </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:Query">
                <sequence> </sequence>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="DocumentQuery">
        <annotation>
            <documentation> Query for finding documents matching specific criteria. </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:Query">
                <sequence> </sequence>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="Operand" abstract="true">
        <simpleContent>
            <extension base="string"/>
        </simpleContent>
    </complexType>
    <complexType name="VariableReference">
        <annotation>
            <documentation> Used to reference workflow data by assigning an dataId to the 'operand' element. Different scopes are available: 'Local' (default) scope is used for finding activity instances belonging to process instances with same scope process instance containing specific workflow data. 'AnyParent' scope is used for finding activity instances belonging to process instances and its subprocess instances containing specific workflow data. 'AnyParentOrChild' scope is used for for finding activity instances belonging to the complete hierarchy of process instances containing specific workflow data. </documentation>
        </annotation>
        <simpleContent>
            <extension base="tns:Operand">
                <attribute name="scope" type="tns:VariableReferenceScope" default="Local"/>
            </extension>
        </simpleContent>
    </complexType>
    <simpleType name="VariableReferenceScope">
        <restriction base="NCName">
            <enumeration value="Local"/>
            <enumeration value="AnyParent"/>
            <enumeration value="AnyParentOrChild"/>
        </restriction>
    </simpleType>
    <complexType name="AttributeReference">
        <annotation>
            <documentation> Used to reference attributes which are specific to every query type. </documentation>
        </annotation>
        <simpleContent>
            <extension base="tns:Operand">
                <attribute name="entity" type="string" use="optional"/>
            </extension>
        </simpleContent>
    </complexType>
    <complexType name="ValueLiteral">
        <annotation>
            <documentation> Used to convey values in binary predicates. </documentation>
        </annotation>
        <simpleContent>
            <extension base="string">
                <attribute name="type" type="QName" use="optional"/>
            </extension>
        </simpleContent>
    </complexType>
    <complexType name="ValuesLiteral">
        <sequence>
            <element name="value" type="string" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="type" type="QName" use="optional"/>
    </complexType>
    <!-- PREDICATE -->
    <complexType name="PredicateBase" abstract="true"/>
    <element name="filterCriterion" type="tns:PredicateBase" abstract="true"/>
    <!-- filter terms -->
    <complexType name="PredicateTerm" abstract="true">
        <annotation>
            <documentation> Contains various elements which work as filters for a query. The elements 'and' and 'or' can contain a nested PredicateTerm for more complex filtering. </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:PredicateBase">
                <sequence>
                    <choice minOccurs="0" maxOccurs="unbounded">
                        <element name="and" type="tns:AndTerm"/>
                        <element name="or" type="tns:OrTerm"/>
                        <element name="isNull" type="tns:IsNullPredicate"/>
                        <element name="notNull" type="tns:NotNullPredicate"/>
                        <element name="isEqual" type="tns:IsEqualPredicate"/>
                        <element name="notEqual" type="tns:NotEqualPredicate"/>
                        <element name="lessThan" type="tns:LessThanPredicate"/>
                        <element name="lessOrEqual" type="tns:LessOrEqualPredicate"/>
                        <element name="greaterOrEqual" type="tns:GreaterOrEqualPredicate"/>
                        <element name="greaterThan" type="tns:GreaterThanPredicate"/>
                        <element name="isLike" type="tns:IsLikePredicate"/>
                        <element name="inList" type="tns:InListPredicate"/>
                        <element name="notInList" type="tns:NotInListPredicate"/>
                        <element name="between" type="tns:BetweenPredicate"/>
                        <element name="forProcessDefinition" type="tns:ProcessDefinitionFilter"/>
                        <element name="forProcess" type="tns:ProcessInstanceFilter"/>
                        <element name="processesInState" type="tns:ProcessStateFilter"/>
                        <element name="forActivityDefinition" type="tns:ActivityDefinitionFilter"/>
                        <element name="forActivity" type="tns:ActivityInstanceFilter"/>
                        <element name="activitiesInState" type="tns:ActivityStateFilter"/>
                        <element name="performingUser" type="tns:PerformingUserFilter"/>
                        <element name="performedByUser" type="tns:PerformedByUserFilter"/>
                        <element name="performingParticipant" type="tns:PerformingParticipantFilter"/>
                        <element name="performingOnBehalfOf" type="tns:PerformingOnBehalfOfFilter"/>
                        <element name="startingUser" type="tns:StartingUserFilter"/>
                        <element name="userState" type="tns:UserStateFilter"/>
                        <element name="participantAssociation" type="tns:ParticipantAssociationFilter"/>
                    </choice>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="AndTerm">
        <annotation>
            <documentation> Identifies an 'and' conjunction for the nested predicate term. </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:PredicateTerm"/>
        </complexContent>
    </complexType>
    <complexType name="OrTerm">
        <annotation>
            <documentation> Identifies an 'or' conjunction for the nested predicate term. </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:PredicateTerm"/>
        </complexContent>
    </complexType>
    <element name="and" type="tns:AndTerm" substitutionGroup="tns:filterCriterion"/>
    <element name="or" type="tns:OrTerm" substitutionGroup="tns:filterCriterion"/>
    <!-- unary operators -->
    <complexType name="UnaryPredicate" abstract="true">
        <complexContent>
            <extension base="tns:PredicateBase">
                <sequence>
                    <element name="variable" type="tns:VariableReference" minOccurs="0"/>
                    <element name="attribute" type="tns:AttributeReference" minOccurs="0"/>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="IsNullPredicate">
        <complexContent>
            <extension base="tns:UnaryPredicate"/>
        </complexContent>
    </complexType>
    <complexType name="NotNullPredicate">
        <complexContent>
            <extension base="tns:UnaryPredicate"/>
        </complexContent>
    </complexType>
    <element name="isNull" type="tns:IsNullPredicate" substitutionGroup="tns:filterCriterion"/>
    <element name="notNull" type="tns:NotNullPredicate" substitutionGroup="tns:filterCriterion"/>
    <!-- binary operators -->
    <complexType name="BinaryPredicateBase" abstract="true">
        <complexContent>
            <extension base="tns:PredicateBase">
                <sequence>
                    <element name="lhsVariable" type="tns:VariableReference" minOccurs="0"/>
                    <element name="lhsAttribute" type="tns:AttributeReference" minOccurs="0"/>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="BinaryPredicate" abstract="true">
        <complexContent>
            <extension base="tns:BinaryPredicateBase">
                <sequence>
                    <element name="rhsValue" type="tns:ValueLiteral" minOccurs="0"/>
                    <element name="rhsAttribute" type="tns:AttributeReference" minOccurs="0"/>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="IsEqualPredicate">
        <complexContent>
            <extension base="tns:BinaryPredicate">
                <attribute name="caseSensitive" type="boolean" default="true"/>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="NotEqualPredicate">
        <complexContent>
            <extension base="tns:BinaryPredicate"/>
        </complexContent>
    </complexType>
    <complexType name="LessThanPredicate">
        <complexContent>
            <extension base="tns:BinaryPredicate"/>
        </complexContent>
    </complexType>
    <complexType name="LessOrEqualPredicate">
        <complexContent>
            <extension base="tns:BinaryPredicate"/>
        </complexContent>
    </complexType>
    <complexType name="GreaterOrEqualPredicate">
        <complexContent>
            <extension base="tns:BinaryPredicate"/>
        </complexContent>
    </complexType>
    <complexType name="GreaterThanPredicate">
        <complexContent>
            <extension base="tns:BinaryPredicate"/>
        </complexContent>
    </complexType>
    <complexType name="IsLikePredicate">
        <complexContent>
            <extension base="tns:BinaryPredicate">
                <attribute name="caseSensitive" type="boolean" default="true"/>
            </extension>
        </complexContent>
    </complexType>
    <element name="isEqual" type="tns:IsEqualPredicate" substitutionGroup="tns:filterCriterion"/>
    <element name="notEqual" type="tns:NotEqualPredicate" substitutionGroup="tns:filterCriterion"/>
    <element name="lessThan" type="tns:LessThanPredicate" substitutionGroup="tns:filterCriterion"/>
    <element name="lessOrEqual" type="tns:LessOrEqualPredicate" substitutionGroup="tns:filterCriterion"/>
    <element name="greaterOrEqual" type="tns:GreaterOrEqualPredicate" substitutionGroup="tns:filterCriterion"/>
    <element name="greaterThan" type="tns:GreaterThanPredicate" substitutionGroup="tns:filterCriterion"/>
    <element name="isLike" type="tns:IsLikePredicate" substitutionGroup="tns:filterCriterion"/>
    <!-- binary list valued operators -->
    <complexType name="BinaryListValuedPredicate" abstract="true">
        <complexContent>
            <extension base="tns:BinaryPredicateBase">
                <sequence>
                    <element name="rhsValues" type="tns:ValuesLiteral" minOccurs="0"/>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="InListPredicate">
        <complexContent>
            <extension base="tns:BinaryListValuedPredicate"/>
        </complexContent>
    </complexType>
    <complexType name="NotInListPredicate">
        <complexContent>
            <extension base="tns:BinaryListValuedPredicate"/>
        </complexContent>
    </complexType>
    <complexType name="BetweenPredicate">
        <complexContent>
            <extension base="tns:BinaryListValuedPredicate"/>
        </complexContent>
    </complexType>
    <element name="inList" type="tns:InListPredicate" substitutionGroup="tns:filterCriterion"/>
    <element name="notInList" type="tns:NotInListPredicate" substitutionGroup="tns:filterCriterion"/>
    <element name="between" type="tns:BetweenPredicate" substitutionGroup="tns:filterCriterion"/>
    <!-- specific filters -->
    <complexType name="ProcessDefinitionFilter">
        <annotation>
            <documentation> Restricts the resulting items to the ones related to a specific process definition. </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:PredicateBase">
                <sequence>
                    <element name="processDefinitionId" type="string"/>
                </sequence>
                <attribute name="includingSubprocesses" type="boolean" default="true"/>
            </extension>
        </complexContent>
    </complexType>
    <element name="forProcessDefinition" type="tns:ProcessDefinitionFilter" substitutionGroup="tns:filterCriterion"/>
    <complexType name="ProcessInstanceFilter">
        <annotation>
            <documentation> Filter criterion for matching specific process instances. </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:PredicateBase">
                <sequence>
                    <element name="processOid" type="long"/>
                </sequence>
                <attribute name="includingSubprocesses" type="boolean" default="true"/>
            </extension>
        </complexContent>
    </complexType>
    <element name="forProcess" type="tns:ProcessInstanceFilter" substitutionGroup="tns:filterCriterion"/>
    <complexType name="ProcessStateFilter">
        <annotation>
            <documentation> Restricts the resulting items to the ones having or not having a specific process state. </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:PredicateBase">
                <sequence>
                    <element name="states">
                        <complexType>
                            <sequence>
                                <element name="state" type="bat:ProcessInstanceState" minOccurs="0" maxOccurs="unbounded"/>
                            </sequence>
                            <attribute name="inclusive" type="boolean" default="true"/>
                        </complexType>
                    </element>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <element name="processesInState" type="tns:ProcessStateFilter" substitutionGroup="tns:filterCriterion"/>
    <complexType name="ActivityDefinitionFilter">
        <annotation>
            <documentation> Restricts the resulting items to the ones related to a specific activity. The search can be further restricted to certain models by passing in a collection of model oids and to a process definition scope by using the 'processId' element. </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:PredicateBase">
                <sequence>
                    <element name="activityId" type="string"/>
                    <element name="processId" type="string" minOccurs="0"/>
                </sequence>
                <attribute name="includingSubprocesses" type="boolean" default="false"/>
                <!--modelOids as list -->
                <attribute name="modelOids" use="optional">
                    <simpleType>
                        <list itemType="long"/>
                    </simpleType>
                </attribute>
            </extension>
        </complexContent>
    </complexType>
    <element name="forActivityDefinition" type="tns:ActivityDefinitionFilter" substitutionGroup="tns:filterCriterion"/>
    <complexType name="ActivityInstanceFilter">
        <annotation>
            <documentation> Filter criterion for matching specific activity instances. </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:PredicateBase">
                <sequence>
                    <element name="activityOid" type="long"/>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <element name="forActivity" type="tns:ActivityInstanceFilter" substitutionGroup="tns:filterCriterion"/>
    <complexType name="ActivityStateFilter">
        <annotation>
            <documentation> Restricts the resulting items to the ones having or not having a specific activity state. </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:PredicateBase">
                <sequence>
                    <element name="states">
                        <complexType>
                            <sequence>
                                <element name="state" type="bat:ActivityInstanceState" minOccurs="0" maxOccurs="unbounded"/>
                            </sequence>
                            <attribute name="inclusive" type="boolean" default="true"/>
                        </complexType>
                    </element>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <element name="activitiesInState" type="tns:ActivityStateFilter" substitutionGroup="tns:filterCriterion"/>
    <complexType name="PerformingUserFilter">
        <annotation>
            <documentation> Restricts the resulting items to the ones currently performed by the specified user. (The currently logged in user is mapped to userOid = -1 for this filter.) </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:PredicateBase">
                <sequence>
                    <!-- userOID=-1 maps to CURRENT_USER -->
                    <element name="userOid" type="long"/>
                </sequence>
                <!--<attribute name="userOid" type="long" />-->
            </extension>
        </complexContent>
    </complexType>
    <element name="performingUser" type="tns:PerformingUserFilter" substitutionGroup="tns:filterCriterion"/>
    <complexType name="PerformedByUserFilter">
        <annotation>
            <documentation> Restricts the resulting items to the ones that were performed by the specified user. (The currently logged in user is mapped to userOid = -1 for this filter.) </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:PredicateBase">
                <sequence>
                    <!-- userOID=-1 maps to CURRENT_USER -->
                    <element name="userOid" type="long"/>
                </sequence>
                <!--<attribute name="userOid" type="long" />-->
            </extension>
        </complexContent>
    </complexType>
    <element name="performedByUser" type="tns:PerformedByUserFilter" substitutionGroup="tns:filterCriterion"/>
    <complexType name="PerformingParticipantFilter">
        <annotation>
            <documentation> Restricts the resulting items to the ones that are performed by the specified user group or model participant. When using 'anyForUser' element the result is restricted to items performed by any participant (roles, organizations or user groups) associated with the calling user. Finding such participants will perform a deep search. </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:PredicateBase">
                <sequence>
                    <choice>
                        <element name="anyForUser">
                            <complexType/>
                        </element>
                        <!-- 5.2.0.35 only UserGroupInfo or ModelParticipantInfo supported-->
                        <element name="modelParticipant">
                            <complexType>
                                <sequence>
                                    <element name="participant" type="bat:ParticipantInfo"/>
                                </sequence>
                                <attribute name="recursively" type="boolean" default="true"/>
                            </complexType>
                        </element>
                    </choice>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <element name="performingParticipant" type="tns:PerformingParticipantFilter" substitutionGroup="tns:filterCriterion"/>
    <complexType name="PerformingOnBehalfOfFilter">
        <annotation>
            <documentation> Restricts the resulting items to the ones that are performed on behalf of the specified user group(s) or model participant(s). </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:PredicateBase">
                <sequence>
                    <choice>
                        <!-- 5.2.0.35 only UserGroupInfo or ModelParticipantInfo supported-->
                        <element name="modelParticipant">
                            <complexType>
                                <sequence>
                                    <element name="participant" type="bat:ParticipantInfo"/>
                                </sequence>
                                <attribute name="recursively" type="boolean" default="true"/>
                            </complexType>
                        </element>
                        <element name="modelParticipants">
                            <complexType>
                                <sequence>
                                    <element name="participants" minOccurs="0">
                                        <complexType>
                                            <sequence>
                                                <!-- 5.2.0.19 only UserGroupInfo or ModelParticipantInfo supported-->
                                                <element name="participant" type="bat:ParticipantInfo" minOccurs="0" maxOccurs="unbounded"/>
                                            </sequence>
                                        </complexType>
                                    </element>
                                </sequence>
                            </complexType>
                        </element>
                    </choice>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <element name="performingOnBehalfOf" type="tns:PerformingOnBehalfOfFilter" substitutionGroup="tns:filterCriterion"/>
    <complexType name="StartingUserFilter">
        <annotation>
            <documentation> Restricts the resulting items to the ones that were started by the specified user. (The currently logged in user is mapped to userOid = -1 for this filter.) </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:PredicateBase">
                <sequence>
                    <!-- userOID=-1 maps to CURRENT_USER -->
                    <element name="userOid" type="long"/>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <element name="startingUser" type="tns:StartingUserFilter" substitutionGroup="tns:filterCriterion"/>
    <complexType name="UserStateFilter">
        <annotation>
            <documentation> Restricts the resulting items to users who are logged in. </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:PredicateBase">
                <attribute name="loggedInOnly" type="boolean" default="true"/>
            </extension>
        </complexContent>
    </complexType>
    <element name="userState" type="tns:UserStateFilter" substitutionGroup="tns:filterCriterion"/>
    <complexType name="ParticipantAssociationFilter">
        <annotation>
            <documentation> Filter criterion for restricting results of UserQuery to users having granted specific roles/organizations or being members of specific user groups. A usage examples is to retrieve all users being administrators. </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:PredicateBase">
                <sequence>
                    <choice>
                        <element name="department" type="bat:DepartmentInfo"/>
                        <element name="teamLeader" type="bat:RoleInfo"/>
                        <element name="modelParticipant">
                            <complexType>
                                <sequence>
                                    <element name="participant" type="bat:ParticipantInfo"/>
                                </sequence>
                                <attribute name="recursively" type="boolean" default="false"/>
                            </complexType>
                        </element>
                    </choice>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <element name="participantAssociation" type="tns:ParticipantAssociationFilter" substitutionGroup="tns:filterCriterion"/>
    <!-- ORDER -->
    <complexType name="OrderCriterion" abstract="true"/>
    <complexType name="OrderCriteria">
        <annotation>
            <documentation> OrderCriteria are used to sort the result of a query. </documentation>
        </annotation>
        <sequence>
            <choice minOccurs="0" maxOccurs="unbounded">
                <element name="attributeOrder" type="tns:AttributeOrder"/>
                <element name="dataOrder" type="tns:DataOrder"/>
            </choice>
        </sequence>
    </complexType>
    <element name="orderCriteria" type="tns:OrderCriteria"/>
    <complexType name="AttributeOrder">
        <annotation>
            <documentation> Criterion for ordering elements resulting from a query according to a given attribute, either with ascending or descending values. </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:OrderCriterion">
                <sequence>
                    <element name="attribute" type="tns:AttributeReference"/>
                    <element name="ascending" type="boolean" default="true"/>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <element name="attributeOrder" type="tns:AttributeOrder"/>
    <complexType name="DataOrder">
        <annotation>
            <documentation> Criterion for ordering elements resulting from a query according to workflow data, either with ascending or descending values. </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:OrderCriterion">
                <sequence>
                    <element name="dataId" type="string"/>
                    <element name="attribute" type="string" minOccurs="0"/>
                    <element name="ascending" type="boolean" default="true"/>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <element name="dataOrder" type="tns:DataOrder"/>
    <!-- POLICY -->
    <complexType name="EvaluationPolicy" abstract="true"/>
    <complexType name="Policy">
        <annotation>
            <documentation> An evaluation policy selects (parts of) the strategy for query evaluation, i.e. which model version to use or what subset to deliver. </documentation>
        </annotation>
        <sequence>
            <choice minOccurs="0" maxOccurs="unbounded">
                <element name="subsetPolicy" type="tns:SubsetPolicy" minOccurs="0"/>
                <element name="modelVersionPolicy" type="tns:ModelVersionPolicy" minOccurs="0"/>
                <element name="descriptorPolicy" type="tns:DescriptorPolicy" minOccurs="0"/>
                <element name="processInstanceDetailsPolicy" type="tns:ProcessInstanceDetailsPolicy" minOccurs="0"/>
                <element name="historicalStatesPolicy" type="tns:HistoricalStatesPolicy" minOccurs="0"/>
                <element name="historicalEventPolicy" type="tns:HistoricalEventPolicy" minOccurs="0"/>
                <element name="criticalExecutionTimePolicy" type="tns:CriticalExecutionTimePolicy" minOccurs="0"/>
                <element name="criticalCostPerExecutionPolicy" type="tns:CriticalCostPerExecutionPolicy" minOccurs="0"/>
                <element name="criticalProcessingTimePolicy" type="tns:CriticalProcessingTimePolicy" minOccurs="0"/>
                <element name="performanceCriticalityPolicy" type="tns:PerformanceCriticalityPolicy" minOccurs="0"/>
                <element name="processCumulationPolicy" type="tns:ProcessCumulationPolicy" minOccurs="0"/>
                <element name="timeoutPolicy" type="tns:TimeoutPolicy" minOccurs="0"/>
                <element name="userDetailsPolicy" type="tns:UserDetailsPolicy" minOccurs="0"/>
            </choice>
        </sequence>
    </complexType>
    <element name="policy" type="tns:Policy"/>
    <complexType name="SubsetPolicy">
        <annotation>
            <documentation> Evaluation Policy for specifying retrieval of only a subset of found data. </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:EvaluationPolicy">
                <sequence>
                    <element name="evaluateTotalCount" type="boolean"/>
                    <element name="maxSize" type="int"/>
                    <element name="skippedEntries" type="int" minOccurs="0"/>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <element name="subsetPolicy" type="tns:SubsetPolicy"/>
    <complexType name="ModelVersionPolicy">
        <annotation>
            <documentation> Evaluation policy affecting query execution in a multi-version model environment. Can be used to restrict query evaluation involving model elements to only consider the currently active model version. </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:EvaluationPolicy">
                <sequence>
                    <element name="restrictedToActiveModel" type="boolean" default="false"/>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <element name="modelVersionPolicy" type="tns:ModelVersionPolicy"/>
    <complexType name="DescriptorPolicy">
        <annotation>
            <documentation> Evaluation Policy to include or exclude descriptors. </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:EvaluationPolicy">
                <sequence>
                    <element name="includeDescriptors" type="boolean" default="true"/>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <element name="descriptorPolicy" type="tns:DescriptorPolicy"/>
    <complexType name="ProcessInstanceDetailsPolicy">
        <annotation>
            <documentation> Evaluation Policy for specifying details level of processInstances. </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:EvaluationPolicy">
                <sequence>
                    <element name="detailsLevel" type="tns:ProcessInstanceDetailsLevel"/>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <element name="processInstanceDetailsPolicy" type="tns:ProcessInstanceDetailsPolicy"/>
    <simpleType name="ProcessInstanceDetailsLevel">
        <restriction base="string">
            <enumeration value="Core"/>
            <enumeration value="WithProperties"/>
            <enumeration value="WithResolvedProperties"/>
            <enumeration value="Full"/>
            <enumeration value="Default"/>
        </restriction>
    </simpleType>
    <element name="processInstanceDetailsLevel" type="tns:ProcessInstanceDetailsLevel"/>
    <complexType name="HistoricalStatesPolicy">
        <annotation>
            <documentation> Evaluation Policy for including historical states. </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:EvaluationPolicy">
                <sequence>
                    <element name="includeHistoricalStates" type="boolean" default="false"/>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <element name="historicalStatesPolicy" type="tns:HistoricalStatesPolicy"/>
    <complexType name="HistoricalEventPolicy">
        <annotation>
            <documentation> Evaluation policy determining the inclusion of the given event types in process and activity instances. Not specifying a 'eventTypes' element defaults to all eventTypes. </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:EvaluationPolicy">
                <sequence>
                    <!-- default=all-->
                    <element name="eventTypes" type="tns:HistoricalEventTypes" minOccurs="0"/>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <element name="historicalEventPolicy" type="tns:HistoricalEventPolicy"/>
    <simpleType name="HistoricalEventTypes">
        <list itemType="tns:HistoricalEventType"/>
    </simpleType>
    <element name="historicalEventTypes" type="tns:HistoricalEventTypes"/>
    <simpleType name="HistoricalEventType">
        <restriction base="string">
            <enumeration value="StateChange"/>
            <enumeration value="Delegation"/>
            <enumeration value="Note"/>
            <enumeration value="Exception"/>
        </restriction>
    </simpleType>
    <element name="historicalEventType" type="tns:HistoricalEventType"/>
    <complexType name="AbstractCriticalityPolicy" abstract="true">
        <complexContent>
            <extension base="tns:EvaluationPolicy">
                <sequence>
                    <element name="lowPriorityCriticalPct" type="float"/>
                    <element name="normalPriorityCriticalPct" type="float"/>
                    <element name="highPriorityCriticalPct" type="float"/>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <element name="AbstractCriticalityPolicy" type="tns:AbstractCriticalityPolicy" abstract="true"/>
    <complexType name="AbstractCriticalDurationPolicy" abstract="true">
        <complexContent>
            <extension base="tns:AbstractCriticalityPolicy">
                <sequence/>
            </extension>
        </complexContent>
    </complexType>
    <element name="AbstractCriticalDurationPolicy" type="tns:AbstractCriticalDurationPolicy" abstract="true"/>
    <complexType name="CriticalExecutionTimePolicy">
        <complexContent>
            <extension base="tns:AbstractCriticalDurationPolicy">
                <sequence/>
            </extension>
        </complexContent>
    </complexType>
    <element name="criticalExecutionTimePolicy" type="tns:CriticalExecutionTimePolicy"/>
    <complexType name="AbstractStoplightPolicy" abstract="true">
        <complexContent>
            <extension base="tns:EvaluationPolicy">
                <sequence>
                    <element name="yellowPct" type="float"/>
                    <element name="redPct" type="float"/>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <element name="abstractStoplightPolicy" type="tns:AbstractStoplightPolicy" abstract="true"/>
    <complexType name="AbstractStoplightCostPolicy" abstract="true">
        <complexContent>
            <extension base="tns:AbstractStoplightPolicy">
                <sequence/>
            </extension>
        </complexContent>
    </complexType>
    <element name="abstractStoplightCostPolicy" type="tns:AbstractStoplightCostPolicy" abstract="true"/>
    <complexType name="CriticalCostPerExecutionPolicy">
        <complexContent>
            <extension base="tns:AbstractStoplightCostPolicy">
                <sequence/>
            </extension>
        </complexContent>
    </complexType>
    <element name="criticalCostPerExecutionPolicy" type="tns:CriticalCostPerExecutionPolicy"/>
    <complexType name="AbstractStoplightDurationPolicy" abstract="true">
        <complexContent>
            <extension base="tns:AbstractStoplightPolicy">
                <sequence/>
            </extension>
        </complexContent>
    </complexType>
    <element name="abstractStoplightDurationPolicy" type="tns:AbstractStoplightDurationPolicy" abstract="true"/>
    <complexType name="CriticalProcessingTimePolicy">
        <complexContent>
            <extension base="tns:AbstractStoplightDurationPolicy">
                <sequence/>
            </extension>
        </complexContent>
    </complexType>
    <element name="criticalProcessingTimePolicy" type="tns:CriticalProcessingTimePolicy"/>
    <complexType name="PerformanceCriticalityPolicy">
        <complexContent>
            <extension base="tns:EvaluationPolicy">
                <sequence>
                    <element name="lowPriorityCriticalPct" type="float"/>
                    <element name="normalPriorityCriticalPct" type="float"/>
                    <element name="highPriorityCriticalPct" type="float"/>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <element name="performanceCriticalityPolicy" type="tns:PerformanceCriticalityPolicy"/>
    <complexType name="ProcessCumulationPolicy">
        <complexContent>
            <extension base="tns:EvaluationPolicy">
                <sequence>
                    <element name="cumulateWithRootPi" type="boolean"/>
                    <element name="cumulateWithScopePi" type="boolean"/>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <element name="processCumulationPolicy" type="tns:ProcessCumulationPolicy"/>
    <complexType name="TimeoutPolicy">
        <complexContent>
            <extension base="tns:EvaluationPolicy">
                <sequence>
                    <element name="timeout" type="int"/>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <element name="timeoutPolicy" type="tns:TimeoutPolicy"/>
    <complexType name="UserDetailsPolicy">
        <annotation>
            <documentation> Evaluation Policy for specifying details level of returned users. </documentation>
        </annotation>
        <complexContent>
            <extension base="tns:EvaluationPolicy">
                <sequence>
                    <element name="level" type="tns:UserDetailsLevel"/>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    <element name="userDetailsPolicy" type="tns:UserDetailsPolicy"/>
    <simpleType name="UserDetailsLevel">
        <restriction base="string">
            <enumeration value="Core"/>
            <enumeration value="WithProperties"/>
            <enumeration value="Full"/>
        </restriction>
    </simpleType>
    <element name="userDetailsLevel" type="tns:UserDetailsLevel"/>
</schema>
